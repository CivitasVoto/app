{
  "contractName": "TestERC20Token",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "standard",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_name",
          "type": "string"
        },
        {
          "name": "_symbol",
          "type": "string"
        },
        {
          "name": "_supply",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.4.26+commit.4563c3fc\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"allow another account/contract to spend some tokens on your behalf\\r throws on any error rather then return a false flag to minimize user errors\\r \\r also, to minimize the risk of the approve/transferFrom attack vector\\r (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice\\r in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value\\r \\r\",\"params\":{\"_spender\":\"approved address\\r\",\"_value\":\"allowance amount\\r \\r\"},\"return\":\"true if the approval was successful, false if it wasn't\\r\"},\"transfer(address,uint256)\":{\"details\":\"send coins\\r throws on any error rather then return a false flag to minimize user errors\\r \\r\",\"params\":{\"_to\":\"target address\\r\",\"_value\":\"transfer amount\\r \\r\"},\"return\":\"true if the transfer was successful, false if it wasn't\\r\"},\"transferFrom(address,address,uint256)\":{\"details\":\"an account/contract attempts to get the coins\\r throws on any error rather then return a false flag to minimize user errors\\r \\r\",\"params\":{\"_from\":\"source address\\r\",\"_to\":\"target address\\r\",\"_value\":\"transfer amount\\r \\r\"},\"return\":\"true if the transfer was successful, false if it wasn't\\r\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/cryptotom/code/gitcoin/communiteths/contracts/bancor/helpers/TestERC20Token.sol\":\"TestERC20Token\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/cryptotom/code/gitcoin/communiteths/contracts/bancor/helpers/TestERC20Token.sol\":{\"keccak256\":\"0x38d6096c479caa6eca0117de232df146893b06c150e81a0f3bde726b413b34cd\",\"urls\":[\"bzzr://da4c1062148ea14513c6eafbb0526c3d373567e6a35651059e1742619c7ff6e7\"]},\"/Users/cryptotom/code/gitcoin/communiteths/contracts/bancor/token/ERC20Token.sol\":{\"keccak256\":\"0xcfa185c49bf810e62d23e9b06fe09beeead7d75ebb17e743945f6b5a7318a39c\",\"urls\":[\"bzzr://fb3aae6e7ea04a3c0385a9522e573da983f835a58c6860ee99559d2c5ed73463\"]},\"/Users/cryptotom/code/gitcoin/communiteths/contracts/bancor/token/interfaces/IERC20Token.sol\":{\"keccak256\":\"0x465f98ed290fb4f65f2d74e938f47c2fa9f7302e766266d8f9326d4c703d5ce3\",\"urls\":[\"bzzr://9746fbda9ee3a4d1e0ed3c5f5d27ebb93114139ad29ae04f313de057f9d1bc92\"]},\"/Users/cryptotom/code/gitcoin/communiteths/contracts/bancor/utility/SafeMath.sol\":{\"keccak256\":\"0x1da299da4f5b50ea11c19a98ff519e8a7c2626222105cbfa0b3c6bbbd726ab7d\",\"urls\":[\"bzzr://e49efd2cc2a188b1fc641ebcdaf1bb262904e45060deb343c4d59ca4dac63034\"]},\"/Users/cryptotom/code/gitcoin/communiteths/contracts/bancor/utility/Utils.sol\":{\"keccak256\":\"0xc6c712f4e559fe6c03d9f84aebc93869bf48ec740355bc4add307e0bbbc41edc\",\"urls\":[\"bzzr://d61b1565f341056ca6a4dd33640327bb55e698c2785c4606972da2acccf439f0\"]}},\"version\":1}",
  "bytecode": "0x60c0604052600960808190527f546f6b656e20302e31000000000000000000000000000000000000000000000060a090815261003e9160009190610141565b5060408051602081019182905260009081905261005d91600191610141565b5060408051602081019182905260009081905261007c91600291610141565b506003805460ff19169055600060045534801561009857600080fd5b506040516108fc3803806108fc833981016040908152815160208301519183015190830180519093929092019183908390600090811080156100db575060008251115b15156100e657600080fd5b82516100f9906001906020860190610141565b50815161010d906002906020850190610141565b506003805460ff191660ff929092169190911790555050600481905533600090815260056020526040902055506101dc9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018257805160ff19168380011785556101af565b828001600101855582156101af579182015b828111156101af578251825591602001919060010190610194565b506101bb9291506101bf565b5090565b6101d991905b808211156101bb57600081556001016101c5565b90565b610711806101eb6000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806318160ddd1461016a57806323b872dd14610191578063313ce567146101bb5780635a3b7e42146101e657806370a08231146101fb57806395d89b411461021c578063a9059cbb14610231578063dd62ed3e14610255575b600080fd5b3480156100b457600080fd5b506100bd61027c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f75781810151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013e57600080fd5b50610156600160a060020a0360043516602435610309565b604080519115158252519081900360200190f35b34801561017657600080fd5b5061017f6103c2565b60408051918252519081900360200190f35b34801561019d57600080fd5b50610156600160a060020a03600435811690602435166044356103c8565b3480156101c757600080fd5b506101d0610503565b6040805160ff9092168252519081900360200190f35b3480156101f257600080fd5b506100bd61050c565b34801561020757600080fd5b5061017f600160a060020a0360043516610567565b34801561022857600080fd5b506100bd610579565b34801561023d57600080fd5b50610156600160a060020a03600435166024356105d1565b34801561026157600080fd5b5061017f600160a060020a036004358116906024351661069a565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103015780601f106102d657610100808354040283529160200191610301565b820191906000526020600020905b8154815290600101906020018083116102e457829003601f168201915b505050505081565b600082600160a060020a038116151561032157600080fd5b82158061034f5750336000908152600660209081526040808320600160a060020a0388168452909152902054155b151561035a57600080fd5b336000818152600660209081526040808320600160a060020a03891680855290835292819020879055805187815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60045481565b600083600160a060020a03811615156103e057600080fd5b83600160a060020a03811615156103f657600080fd5b600160a060020a038616600090815260066020908152604080832033845290915290205461042a908563ffffffff6106b716565b600160a060020a03871660008181526006602090815260408083203384528252808320949094559181526005909152205461046b908563ffffffff6106b716565b600160a060020a0380881660009081526005602052604080822093909355908716815220546104a0908563ffffffff6106cc16565b600160a060020a0380871660008181526005602090815260409182902094909455805188815290519193928a16927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600195945050505050565b60035460ff1681565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103015780601f106102d657610100808354040283529160200191610301565b60056020526000908152604090205481565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103015780601f106102d657610100808354040283529160200191610301565b600082600160a060020a03811615156105e957600080fd5b33600090815260056020526040902054610609908463ffffffff6106b716565b3360009081526005602052604080822092909255600160a060020a0386168152205461063b908463ffffffff6106cc16565b600160a060020a0385166000818152600560209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b600660209081526000928352604080842090915290825290205481565b6000818310156106c657600080fd5b50900390565b6000828201838110156106de57600080fd5b93925050505600a165627a7a723058204a5493e4f668d8dcfe99339859796fbc2f50d23aa04e32b0deaaa760ed1896c00029",
  "deployedBytecode": "0x6080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806318160ddd1461016a57806323b872dd14610191578063313ce567146101bb5780635a3b7e42146101e657806370a08231146101fb57806395d89b411461021c578063a9059cbb14610231578063dd62ed3e14610255575b600080fd5b3480156100b457600080fd5b506100bd61027c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f75781810151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013e57600080fd5b50610156600160a060020a0360043516602435610309565b604080519115158252519081900360200190f35b34801561017657600080fd5b5061017f6103c2565b60408051918252519081900360200190f35b34801561019d57600080fd5b50610156600160a060020a03600435811690602435166044356103c8565b3480156101c757600080fd5b506101d0610503565b6040805160ff9092168252519081900360200190f35b3480156101f257600080fd5b506100bd61050c565b34801561020757600080fd5b5061017f600160a060020a0360043516610567565b34801561022857600080fd5b506100bd610579565b34801561023d57600080fd5b50610156600160a060020a03600435166024356105d1565b34801561026157600080fd5b5061017f600160a060020a036004358116906024351661069a565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103015780601f106102d657610100808354040283529160200191610301565b820191906000526020600020905b8154815290600101906020018083116102e457829003601f168201915b505050505081565b600082600160a060020a038116151561032157600080fd5b82158061034f5750336000908152600660209081526040808320600160a060020a0388168452909152902054155b151561035a57600080fd5b336000818152600660209081526040808320600160a060020a03891680855290835292819020879055805187815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60045481565b600083600160a060020a03811615156103e057600080fd5b83600160a060020a03811615156103f657600080fd5b600160a060020a038616600090815260066020908152604080832033845290915290205461042a908563ffffffff6106b716565b600160a060020a03871660008181526006602090815260408083203384528252808320949094559181526005909152205461046b908563ffffffff6106b716565b600160a060020a0380881660009081526005602052604080822093909355908716815220546104a0908563ffffffff6106cc16565b600160a060020a0380871660008181526005602090815260409182902094909455805188815290519193928a16927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600195945050505050565b60035460ff1681565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103015780601f106102d657610100808354040283529160200191610301565b60056020526000908152604090205481565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103015780601f106102d657610100808354040283529160200191610301565b600082600160a060020a03811615156105e957600080fd5b33600090815260056020526040902054610609908463ffffffff6106b716565b3360009081526005602052604080822092909255600160a060020a0386168152205461063b908463ffffffff6106cc16565b600160a060020a0385166000818152600560209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b600660209081526000928352604080842090915290825290205481565b6000818310156106c657600080fd5b50900390565b6000828201838110156106de57600080fd5b93925050505600a165627a7a723058204a5493e4f668d8dcfe99339859796fbc2f50d23aa04e32b0deaaa760ed1896c00029",
  "sourceMap": "276:36:35:-;104:241:29;276:36:35;;104:241:29;276:36:35;;;;;;;;;;-1:-1:-1;;276:36:35;;:::i;:::-;-1:-1:-1;319:23:35;;;;;;;;;;-1:-1:-1;319:23:35;;;;;;;;;:::i;:::-;-1:-1:-1;349:25:35;;;;;;;;;;-1:-1:-1;349:25:35;;;;;;;;;:::i;:::-;-1:-1:-1;381:25:35;;;-1:-1:-1;;381:25:35;;;405:1;413:30;;148:195:29;5:2:-1;;;;30:1;27;20:12;5:2;148:195:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1564:19:35;;148:195:29;;;;;;;;;;;257:1;;1564:23:35;-1:-1:-1;1564:52:35;;;;;1615:1;1597:7;1591:21;:25;1564:52;1556:61;;;;;;;;1648:12;;;;:4;;:12;;;;;:::i;:::-;-1:-1:-1;1671:16:35;;;;:6;;:16;;;;;:::i;:::-;-1:-1:-1;1698:8:35;:20;;-1:-1:-1;;1698:20:35;;;;;;;;;;;;-1:-1:-1;;274:11:29;:21;;;315:10;-1:-1:-1;305:21:29;;;:9;:21;;;;;:31;-1:-1:-1;104:241:29;;-1:-1:-1;104:241:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;104:241:29;;;-1:-1:-1;104:241:29;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "104:241:29:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;319:23:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;319:23:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;319:23:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3899:470;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3899:470:35;-1:-1:-1;;;;;3899:470:35;;;;;;;;;;;;;;;;;;;;;;;;;413:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;413:30:35;;;;;;;;;;;;;;;;;;;;2747:443;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2747:443:35;-1:-1:-1;;;;;2747:443:35;;;;;;;;;;;;381:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;381:25:35;;;;;;;;;;;;;;;;;;;;;;;276:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;276:36:35;;;;450:45;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;450:45:35;-1:-1:-1;;;;;450:45:35;;;;;349:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;349:25:35;;;;2035:328;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2035:328:35;-1:-1:-1;;;;;2035:328:35;;;;;;;502:66;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;502:66:35;-1:-1:-1;;;;;502:66:35;;;;;;;;;;319:23;;;;;;;;;;;;;;;-1:-1:-1;;319:23:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3899:470::-;4016:12;3988:8;-1:-1:-1;;;;;458:22:51;;;;450:31;;;;;;4180:11:35;;;:51;;-1:-1:-1;4205:10:35;4195:21;;;;:9;:21;;;;;;;;-1:-1:-1;;;;;4195:31:35;;;;;;;;;;:36;4180:51;4172:60;;;;;;;;4255:10;4245:21;;;;:9;:21;;;;;;;;-1:-1:-1;;;;;4245:31:35;;;;;;;;;;;;:40;;;4301:38;;;;;;;4245:31;;4255:10;4301:38;;;;;;;;;;;-1:-1:-1;4357:4:35;;3899:470;-1:-1:-1;;;3899:470:35:o;413:30::-;;;;:::o;2747:443::-;2903:12;2851:5;-1:-1:-1;;;;;458:22:51;;;;450:31;;;;;;2880:3:35;-1:-1:-1;;;;;458:22:51;;;;450:31;;;;;;-1:-1:-1;;;;;2964:16:35;;;;;;:9;:16;;;;;;;;2981:10;2964:28;;;;;;;;:40;;2997:6;2964:40;:32;:40;:::i;:::-;-1:-1:-1;;;;;2933:16:35;;;;;;:9;:16;;;;;;;;2950:10;2933:28;;;;;;;:71;;;;3034:16;;;:9;:16;;;;;:28;;3055:6;3034:28;:20;:28;:::i;:::-;-1:-1:-1;;;;;3015:16:35;;;;;;;:9;:16;;;;;;:47;;;;3090:14;;;;;;;:26;;3109:6;3090:26;:18;:26;:::i;:::-;-1:-1:-1;;;;;3073:14:35;;;;;;;:9;:14;;;;;;;;;:43;;;;3132:28;;;;;;;3073:14;;3132:28;;;;;;;;;;;;;-1:-1:-1;3178:4:35;;2747:443;-1:-1:-1;;;;;2747:443:35:o;381:25::-;;;;;;:::o;276:36::-;;;;;;;;;;;;;;;-1:-1:-1;;276:36:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;450:45;;;;;;;;;;;;;:::o;349:25::-;;;;;;;;;;;;;;-1:-1:-1;;349:25:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2035:328;2143:12;2120:3;-1:-1:-1;;;;;458:22:51;;;;450:31;;;;;;2207:10:35;2197:21;;;;:9;:21;;;;;;:33;;2223:6;2197:33;:25;:33;:::i;:::-;2183:10;2173:21;;;;:9;:21;;;;;;:57;;;;-1:-1:-1;;;;;2258:14:35;;;;;;:26;;2277:6;2258:26;:18;:26;:::i;:::-;-1:-1:-1;;;;;2241:14:35;;;;;;:9;:14;;;;;;;;;:43;;;;2300:33;;;;;;;2241:14;;2309:10;;2300:33;;;;;;;;;;-1:-1:-1;2351:4:35;;2035:328;-1:-1:-1;;;2035:328:35:o;502:66::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;715:130:49:-;775:7;803:8;;;;795:17;;;;;;-1:-1:-1;830:7:49;;;715:130::o;337:153::-;397:7;429;;;455;;;;447:16;;;;;;481:1;337:153;-1:-1:-1;;;337:153:49:o",
  "source": "pragma solidity ^0.4.24;\nimport '../token/ERC20Token.sol';\n\n/*\n    Test token with predefined supply\n*/\ncontract TestERC20Token is ERC20Token {\n    constructor(string _name, string _symbol, uint256 _supply)\n        public\n        ERC20Token(_name, _symbol, 0)\n    {\n        totalSupply = _supply;\n        balanceOf[msg.sender] = _supply;\n    }\n}\n",
  "sourcePath": "/Users/cryptotom/code/gitcoin/communiteths/contracts/bancor/helpers/TestERC20Token.sol",
  "ast": {
    "absolutePath": "/Users/cryptotom/code/gitcoin/communiteths/contracts/bancor/helpers/TestERC20Token.sol",
    "exportedSymbols": {
      "TestERC20Token": [
        10672
      ]
    },
    "id": 10673,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10642,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:29"
      },
      {
        "absolutePath": "/Users/cryptotom/code/gitcoin/communiteths/contracts/bancor/token/ERC20Token.sol",
        "file": "../token/ERC20Token.sol",
        "id": 10643,
        "nodeType": "ImportDirective",
        "scope": 10673,
        "sourceUnit": 11170,
        "src": "25:33:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 10644,
              "name": "ERC20Token",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 11169,
              "src": "131:10:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Token_$11169",
                "typeString": "contract ERC20Token"
              }
            },
            "id": 10645,
            "nodeType": "InheritanceSpecifier",
            "src": "131:10:29"
          }
        ],
        "contractDependencies": [
          11169,
          11814,
          12746
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 10672,
        "linearizedBaseContracts": [
          10672,
          11169,
          12746,
          11814
        ],
        "name": "TestERC20Token",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 10670,
              "nodeType": "Block",
              "src": "264:79:29",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 10661,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 10659,
                      "name": "totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        10947
                      ],
                      "referencedDeclaration": 10947,
                      "src": "274:11:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 10660,
                      "name": "_supply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10651,
                      "src": "288:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "274:21:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10662,
                  "nodeType": "ExpressionStatement",
                  "src": "274:21:29"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 10668,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 10663,
                        "name": "balanceOf",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [
                          10951
                        ],
                        "referencedDeclaration": 10951,
                        "src": "305:9:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 10666,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 10664,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 13040,
                          "src": "315:3:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 10665,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "315:10:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "305:21:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 10667,
                      "name": "_supply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10651,
                      "src": "329:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "305:31:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10669,
                  "nodeType": "ExpressionStatement",
                  "src": "305:31:29"
                }
              ]
            },
            "documentation": null,
            "id": 10671,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 10654,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10647,
                    "src": "241:5:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 10655,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10649,
                    "src": "248:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "30",
                    "id": 10656,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "257:1:29",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  }
                ],
                "id": 10657,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 10653,
                  "name": "ERC20Token",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 11169,
                  "src": "230:10:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Token_$11169_$",
                    "typeString": "type(contract ERC20Token)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "230:29:29"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10652,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10647,
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "scope": 10671,
                  "src": "160:12:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10646,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "160:6:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10649,
                  "name": "_symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 10671,
                  "src": "174:14:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10648,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "174:6:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10651,
                  "name": "_supply",
                  "nodeType": "VariableDeclaration",
                  "scope": 10671,
                  "src": "190:15:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10650,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "190:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "159:47:29"
            },
            "payable": false,
            "returnParameters": {
              "id": 10658,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "264:0:29"
            },
            "scope": 10672,
            "src": "148:195:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 10673,
        "src": "104:241:29"
      }
    ],
    "src": "0:346:29"
  },
  "legacyAST": {
    "absolutePath": "/Users/cryptotom/code/gitcoin/communiteths/contracts/bancor/helpers/TestERC20Token.sol",
    "exportedSymbols": {
      "TestERC20Token": [
        10672
      ]
    },
    "id": 10673,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10642,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:29"
      },
      {
        "absolutePath": "/Users/cryptotom/code/gitcoin/communiteths/contracts/bancor/token/ERC20Token.sol",
        "file": "../token/ERC20Token.sol",
        "id": 10643,
        "nodeType": "ImportDirective",
        "scope": 10673,
        "sourceUnit": 11170,
        "src": "25:33:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 10644,
              "name": "ERC20Token",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 11169,
              "src": "131:10:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Token_$11169",
                "typeString": "contract ERC20Token"
              }
            },
            "id": 10645,
            "nodeType": "InheritanceSpecifier",
            "src": "131:10:29"
          }
        ],
        "contractDependencies": [
          11169,
          11814,
          12746
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 10672,
        "linearizedBaseContracts": [
          10672,
          11169,
          12746,
          11814
        ],
        "name": "TestERC20Token",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 10670,
              "nodeType": "Block",
              "src": "264:79:29",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 10661,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 10659,
                      "name": "totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        10947
                      ],
                      "referencedDeclaration": 10947,
                      "src": "274:11:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 10660,
                      "name": "_supply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10651,
                      "src": "288:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "274:21:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10662,
                  "nodeType": "ExpressionStatement",
                  "src": "274:21:29"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 10668,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 10663,
                        "name": "balanceOf",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [
                          10951
                        ],
                        "referencedDeclaration": 10951,
                        "src": "305:9:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 10666,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 10664,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 13040,
                          "src": "315:3:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 10665,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "315:10:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "305:21:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 10667,
                      "name": "_supply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10651,
                      "src": "329:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "305:31:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10669,
                  "nodeType": "ExpressionStatement",
                  "src": "305:31:29"
                }
              ]
            },
            "documentation": null,
            "id": 10671,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 10654,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10647,
                    "src": "241:5:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 10655,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10649,
                    "src": "248:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "30",
                    "id": 10656,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "257:1:29",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  }
                ],
                "id": 10657,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 10653,
                  "name": "ERC20Token",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 11169,
                  "src": "230:10:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Token_$11169_$",
                    "typeString": "type(contract ERC20Token)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "230:29:29"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10652,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10647,
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "scope": 10671,
                  "src": "160:12:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10646,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "160:6:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10649,
                  "name": "_symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 10671,
                  "src": "174:14:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10648,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "174:6:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10651,
                  "name": "_supply",
                  "nodeType": "VariableDeclaration",
                  "scope": 10671,
                  "src": "190:15:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10650,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "190:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "159:47:29"
            },
            "payable": false,
            "returnParameters": {
              "id": 10658,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "264:0:29"
            },
            "scope": 10672,
            "src": "148:195:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 10673,
        "src": "104:241:29"
      }
    ],
    "src": "0:346:29"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.26+commit.4563c3fc.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-09-13T02:05:18.040Z",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "allow another account/contract to spend some tokens on your behalf\r throws on any error rather then return a false flag to minimize user errors\r \r also, to minimize the risk of the approve/transferFrom attack vector\r (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice\r in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value\r \r",
        "params": {
          "_spender": "approved address\r",
          "_value": "allowance amount\r \r"
        },
        "return": "true if the approval was successful, false if it wasn't\r"
      },
      "transfer(address,uint256)": {
        "details": "send coins\r throws on any error rather then return a false flag to minimize user errors\r \r",
        "params": {
          "_to": "target address\r",
          "_value": "transfer amount\r \r"
        },
        "return": "true if the transfer was successful, false if it wasn't\r"
      },
      "transferFrom(address,address,uint256)": {
        "details": "an account/contract attempts to get the coins\r throws on any error rather then return a false flag to minimize user errors\r \r",
        "params": {
          "_from": "source address\r",
          "_to": "target address\r",
          "_value": "transfer amount\r \r"
        },
        "return": "true if the transfer was successful, false if it wasn't\r"
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}